import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { jwtVerify } from 'jose'

const JWT_SECRET = new TextEncoder().encode(
  process.env['JWT_SECRET'] || 'your-secret-key-change-in-production'
)

// Paths that don't require authentication
const publicPaths = [
  '/',
  '/login',
  '/register',
  '/forgot-password',
  '/api/auth/login',
  '/api/auth/register',
  '/api/auth/forgot-password'
]

// Paths that require authentication
const protectedPaths = [
  '/dashboard',
  '/api/vehicles',
  '/api/user',
  '/api/bids',
  '/api/inspections',
  '/api/translations'
]

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  
  // Check if path is public
  const isPublicPath = publicPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  )
  
  // Check if path is protected
  const isProtectedPath = protectedPaths.some(path => 
    pathname === path || pathname.startsWith(`${path}/`)
  )
  
  // Skip middleware for public paths and static assets
  if (isPublicPath || pathname.includes('/_next/') || pathname.includes('/favicon')) {
    return NextResponse.next()
  }
  
  // Only check auth for protected paths
  if (isProtectedPath) {
    const accessToken = request.cookies.get('access_token')
    
    if (!accessToken) {
      // Redirect to login if no token
      const loginUrl = new URL('/login', request.url)
      loginUrl.searchParams.set('from', pathname)
      return NextResponse.redirect(loginUrl)
    }
    
    try {
      // Verify the access token
      const { payload } = await jwtVerify(accessToken.value, JWT_SECRET)
      
      // Add user info to headers for API routes
      if (pathname.startsWith('/api/')) {
        const requestHeaders = new Headers(request.headers)
        requestHeaders.set('x-user-id', String(payload['userId']))
        requestHeaders.set('x-user-email', String(payload['email']))
        requestHeaders.set('x-user-role', String(payload['role']))
        
        return NextResponse.next({
          request: {
            headers: requestHeaders,
          },
        })
      }
      
      return NextResponse.next()
    } catch (error) {
      console.error('Token verification failed:', error)
      
      // For API routes, return 401
      if (pathname.startsWith('/api/')) {
        return NextResponse.json(
          { error: 'Unauthorized' },
          { status: 401 }
        )
      }
      
      // For pages, redirect to login
      const loginUrl = new URL('/login', request.url)
      loginUrl.searchParams.set('from', pathname)
      return NextResponse.redirect(loginUrl)
    }
  }
  
  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\..*|public).*)',
  ],
}